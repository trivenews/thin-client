{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "showdown.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    ";/*! showdown 06-02-2017 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts (simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Specify a prefix to generated header ids',\n      type: 'string'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    },\n    ghMentionsLink: {\n      defaultValue: 'https://github.com/{u}',\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n      type: 'string'\n    },\n    encodeEmails: {\n      defaultValue: true,\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn () {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true\n      },\n      original: {\n        noHeaderId:                           true,\n        ghCodeBlocks:                         false\n      },\n      ghost: {\n        omitExtraWLInCodeBlocks:              true,\n        parseImgDimensions:                   true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        smoothLivePreview:                    true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghMentions:                           false,\n        encodeEmails:                         true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate (extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n      ret = {\n        valid: true,\n        error: ''\n      };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!(ext.regex instanceof RegExp)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function (a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function (a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function (a) {\n  'use strict';\n  return a.constructor === Array;\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function (value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * ForEach helper function\n * Iterates over Arrays and Objects (own properties only)\n * @static\n * @param {*} obj\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n */\nshowdown.helper.forEach = function (obj, callback) {\n  'use strict';\n  // check if obj is defined\n  if (showdown.helper.isUndefined(obj)) {\n    throw new Error('obj param is required');\n  }\n\n  if (showdown.helper.isUndefined(callback)) {\n    throw new Error('callback param is required');\n  }\n\n  if (!showdown.helper.isFunction(callback)) {\n    throw new Error('callback param must be a function/closure');\n  }\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else if (showdown.helper.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  } else if (typeof (obj) === 'object') {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        callback(obj[prop], prop, obj);\n      }\n    }\n  } else {\n    throw new Error('obj does not seem to be an array or an iterable object');\n  }\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback (wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '¨E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n      g = f.indexOf('g') > -1,\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n      l = new RegExp(left, f.replace(/g/g, '')),\n      pos = [],\n      t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n      results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * Obfuscate an e-mail address through the use of Character Entities,\n * transforming ASCII characters into their equivalent decimal or hex entities.\n *\n * Since it has a random component, subsequent calls to this function produce different results\n *\n * @param {string} mail\n * @returns {string}\n */\nshowdown.helper.encodeEmailAddress = function (mail) {\n  'use strict';\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  mail = mail.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else {\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  return mail;\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof(console) === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\n/**\n * Common regexes.\n * We declare some common regexes to improve performance\n */\nshowdown.helper.regexes = {\n  asteriskAndDash: /([*_])/g\n};\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor;\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor () {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension (ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n      // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading (ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen (name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText (text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    []\n    };\n\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/¨/g, '¨T');\n\n    // Replace $ with ¨D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '¨D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces (nbsp causes trouble in older browsers and some regex flavors)\n    text = text.replace(/\\u00A0/g, ' ');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    /**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n    text = text.replace(/^[ \\t]+$/mg, '');\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/¨D/g, '$$');\n\n    // attacklab: Restore tremas\n    text = text.replace(/¨T/g, '¨');\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    return text;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n    if (showdown.helper.isUndefined(m7)) {\n      m7 = '';\n    }\n    wholeMatch = m1;\n    var linkText = m2,\n        linkId = m3.toLowerCase(),\n        url = m4,\n        title = m7;\n\n    if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        if (wholeMatch.search(/\\(\\s*\\)$/m) > -1) {\n          // Special case for explicit empty url\n          url = '';\n        } else {\n          return wholeMatch;\n        }\n      }\n    }\n\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)][ ]?(?:\\n[ ]*)?\\[(.*?)])()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,\n                      writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/(\\[([^\\[\\]]+)])()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d\\-]+))(?=[.!?;,[\\]()]|\\s|$)/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      //check if options.ghMentionsLink is a string\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username);\n      return st + '<a href=\"' + lnk + '\">' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  var simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+)()(?=\\s|$)(?![\"<>])/gi,\n      simpleURLRegex2 = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?()]?)(?=\\s|$)(?![\"<>])/gi,\n      delimUrlRegex   = /<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)>/gi,\n      simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n      delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi;\n\n  text = text.replace(delimUrlRegex, replaceLink);\n  text = text.replace(delimMailRegex, replaceMail);\n  // simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[-.+~:?#@!$&'()*,;=[\\]\\w]+)\\b/gi,\n  // Email addresses: <address@domain.foo>\n\n  if (options.simplifiedAutoLink) {\n    if (options.excludeTrailingPunctuationFromURLs) {\n      text = text.replace(simpleURLRegex2, replaceLink);\n    } else {\n      text = text.replace(simpleURLRegex, replaceLink);\n    }\n    text = text.replace(simpleMailRegex, replaceMail);\n  }\n\n  function replaceLink (wm, link, m2, m3, trailingPunctuation) {\n    var lnkTxt = link,\n        append = '';\n    if (/^www\\./i.test(link)) {\n      link = link.replace(/^www\\./i, 'http://www.');\n    }\n    if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n      append = trailingPunctuation;\n    }\n    return '<a href=\"' + link + '\">' + lnkTxt + '</a>' + append;\n  }\n\n  function replaceMail (wholeMatch, b, mail) {\n    var href = 'mailto:';\n    b = b || '';\n    mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n    if (options.encodeEmails) {\n      href = showdown.helper.encodeEmailAddress(href + mail);\n      mail = showdown.helper.encodeEmailAddress(mail);\n    } else {\n      href = href + mail;\n    }\n    return b + '<a href=\"' + href + '\">' + mail + '</a>';\n  }\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  text = showdown.subParser('horizontalRule')(text, options, globals);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  text = text.replace(/((^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n    var bq = m1;\n\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, '¨0'); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/¨0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '¨0');\n      pre = pre.replace(/¨0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  if (typeof(text) === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      return m1 + '<code>' + c + '</code>';\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('detab.before', text, options, globals);\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '¨A¨B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\n  text = text.replace(/¨B/g, '');\n\n  text = globals.converter._dispatch('detab.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\n\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\n\n  // Encode <\n  text = text.replace(/</g, '&lt;');\n\n  // Encode >\n  text = text.replace(/>/g, '&gt;');\n\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text\n    .replace(/&/g, '&amp;')\n  // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n  // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\n\n  // Build a regex to find HTML tags and comments.  See Friedl's\n  // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n  var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n\n  text = text.replace(regex, function (wholeMatch) {\n    return wholeMatch\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\n      .replace(/([\\\\`*_~=])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '¨0';\n\n  text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n  };\n\n  // Hash naked <code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n  var blockTags = [\n        'pre',\n        'div',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'blockquote',\n        'table',\n        'dl',\n        'ol',\n        'ul',\n        'script',\n        'noscript',\n        'form',\n        'fieldset',\n        'iframe',\n        'math',\n        'style',\n        'section',\n        'header',\n        'footer',\n        'nav',\n        'article',\n        'aside',\n        'address',\n        'audio',\n        'canvas',\n        'figure',\n        'hgroup',\n        'output',\n        'video',\n        'p'\n      ],\n      repFunc = function (wholeMatch, match, left, right) {\n        var txt = wholeMatch;\n        // check if this html element is marked as markdown\n        // if so, it's contents should be parsed as markdown\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\n          txt = left + globals.converter.makeHtml(match) + right;\n        }\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n      };\n\n  for (var i = 0; i < blockTags.length; ++i) {\n    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<' + blockTags[i] + '\\\\b[^>]*>', '</' + blockTags[i] + '>', 'gim');\n  }\n\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n  function hashHTMLSpan (html) {\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n  }\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <pre><code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  // Hash <pre><code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n      ghHeaderId = options.ghCompatibleHeaderId,\n\n  // Set text-style headers:\n  //\tHeader 1\n  //\t========\n  //\n  //\tHeader 2\n  //\t--------\n  //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var span = showdown.subParser('spanGamut')(m2, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId (m) {\n    var title;\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (showdown.helper.isString(options.prefixHeaderId)) {\n      title = options.prefixHeaderId + m;\n    } else if (options.prefixHeaderId === true) {\n      title = 'section ' + m;\n    } else {\n      title = m;\n    }\n\n    if (ghHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '')\n        .replace(/¨T/g, '')\n        .replace(/¨D/g, '')\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else {\n      title = title\n        .replace(/[^\\w]/g, '')\n        .toLowerCase();\n    }\n\n    if (globals.hashLinkCounts[title]) {\n      title = title + '-' + (globals.hashLinkCounts[title]++);\n    } else {\n      globals.hashLinkCounts[title] = 1;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('horizontalRule', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp    = /!\\[(.*?)]\\s?\\([ \\t]*()<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(['\"])(.*?)\\6[ \\t]*)?\\)/g,\n      referenceRegExp = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[(.*?)]()()()()()/g;\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n\n    if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText\n      .replace(/\"/g, '&quot;')\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title) {\n      title = title\n        .replace(/\"/g, '&quot;')\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  // it's faster to have 3 separate regexes for each case than have just one\n  // because of backtracing, in some cases, it could lead to an exponential effect\n  // called \"catastrophic backtrace\". Ominous!\n\n  // Parse underscores\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*)___\\b/g, '<strong><em>$1</em></strong>');\n    text = text.replace(/\\b__(\\S[\\s\\S]*)__\\b/g, '<strong>$1</strong>');\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, '<em>$1</em>');\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<strong><em>' + m + '</em></strong>' : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<strong>' + m + '</strong>' : wm;\n    });\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? '<em>' + m + '</em>' : wm;\n    });\n  }\n\n  // Now parse asterisks\n  text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n    return (/\\S$/.test(m)) ? '<strong><em>' + m + '</em></strong>' : wm;\n  });\n  text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n    return (/\\S$/.test(m)) ? '<strong>' + m + '</strong>' : wm;\n  });\n  text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n    // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n    return (/\\S$/.test(m)) ? '<em>' + m + '</em>' : wm;\n  });\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '¨0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '¨A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        // replace double linebreaks with a placeholder\n        item = item.replace(/\\n\\n/g, '¨B');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n        item = item.replace(/¨B/g, '\\n\\n');\n      }\n\n      // now we need to remove the marker (¨A)\n      item = item.replace('¨A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/¨0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists (list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL (txt) {\n        var pos = txt.search(counterRxg);\n        if (pos !== -1) {\n          // slice\n          result += '\\n<' + listType + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n<' + listType + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      result = '\\n<' + listType + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '¨0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/¨0/g, '');\n\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n\n    // test for presence of characters to prevent empty lines being parsed\n    // as paragraphs (resulting in undesired extra empty paragraphs)\n    } else if (str.search(/\\S/) >= 0) {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    // use RegExp.test instead of string.search because of QML bug\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!(re instanceof RegExp)) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after _DoAnchors(), because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n\n  // we need to hash HTML tags inside spans\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n\n  // now we encode amps and angles\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    text = text.replace(/\\n/g, '<br />\\n');\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, '<del>$1</del>');\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  text = text.replace(regex, function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx = /^ {0,3}\\|?.+\\|.+\\n[ \\t]{0,3}\\|?[ \\t]*:?[ \\t]*(?:-|=){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:-|=){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm;\n\n  function parseStyles (sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders (header, style) {\n    var id = '';\n    header = header.trim();\n    if (options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells (cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable (headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  text = text.replace(tableRgx, function (rawTable) {\n\n    var i, tableLines = rawTable.split('\\n');\n\n    // strip wrong first and last column if wrapped tables are used\n    for (i = 0; i < tableLines.length; ++i) {\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  });\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n  return text;\n});\n\r\nvar root = this;\n\n// CommonJS/nodeJS Loader\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = showdown;\n\n// AMD Loader\n} else if (typeof define === 'function' && define.amd) {\n  define(function () {\n    'use strict';\n    return showdown;\n  });\n\n// Regular Browser loader\n} else {\n  root.showdown = showdown;\n}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n"
  ]
}